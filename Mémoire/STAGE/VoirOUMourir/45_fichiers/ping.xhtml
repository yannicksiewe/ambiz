<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html [
  <!ENTITY % htmlDTD
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "DTD/xhtml1-strict.dtd">
  %htmlDTD;
  <!ENTITY % netErrorDTD
    SYSTEM "chrome://global/locale/netError.dtd">
  %netErrorDTD;

<!ENTITY loadError.label "Erreur de chargement de la page">
<!ENTITY retry.label "Réessayer">

<!-- Specific error messages -->

<!ENTITY connectionFailure.title "La connexion a échoué">
<!ENTITY connectionFailure.longDesc "&sharedLongDesc;">

<!ENTITY deniedPortAccess.title "Cette adresse est interdite">
<!ENTITY deniedPortAccess.longDesc "">

<!ENTITY dnsNotFound.title "Adresse introuvable">
<!ENTITY dnsNotFound.longDesc "
<ul>
  <li>Veuillez vérifier la syntaxe de l'adresse
    (saisie de <strong>ww</strong>.exemple.com au lieu de
    <strong>www</strong>.exemple.com par exemple)&#x00A0;;</li>
  <li>Si vous n'arrivez à naviguer sur aucun site, vérifiez la connexion
    au réseau de votre ordinateur&#x00A0;;</li>
  <li>Si votre ordinateur ou votre réseau est protégé par un pare-feu ou un proxy,
    assurez-vous que &brandShortName; a l'autorisation d'accéder au Web.</li>
</ul>
">

<!ENTITY fileNotFound.title "Fichier introuvable">
<!ENTITY fileNotFound.longDesc "
<ul>
  <li>Vérifiez la syntaxe du nom de fichier (dont le respect des minuscules/majuscules)&#x00A0;;</li>
  <li>Vérifiez si le fichier n'a pas été déplacé, renommé ou supprimé.</li>
</ul>
">

<!ENTITY generic.title "La requête ne peut aboutir">
<!ENTITY generic.longDesc "
<p>Pour une raison inconnue, &brandShortName; ne peut pas charger cette page.</p>
">

<!ENTITY malformedURI.title "L'adresse n'est pas valide">
<!ENTITY malformedURI.longDesc "
<ul>
  <li>La syntaxe des adresses web est généralement
    <strong>http://www.exemple.com/</strong>&#x00A0;;</li>
  <li>Assurez-vous de bien utiliser des barres obliques (c.à.d.
    <strong>/</strong>).</li>
</ul>
">

<!ENTITY netInterrupt.title "La connexion a été interrompue">
<!ENTITY netInterrupt.longDesc "&sharedLongDesc;">

<!ENTITY notCached.title "Le document a expiré">
<!ENTITY notCached.longDesc "<p>Le document demandé n'est plus disponible dans le cache de &brandShortName;.</p><ul><li>Par mesure de sécurité, &brandShortName; ne redemande pas automatiquement de documents sensibles.</li><li>Cliquez sur Réessayer pour redemander ce document depuis le site web.</li></ul>">

<!ENTITY netOffline.title "Mode hors connexion">
<!ENTITY netOffline.longDesc2 "
<ul>
  <li>Cliquez sur le bouton « Réessayer » pour revenir en mode connecté et recharger la page.</li>
</ul>
">

<!ENTITY contentEncodingError.title "Erreur d'encodage de contenu">
<!ENTITY contentEncodingError.longDesc "
<ul>
  <li>Veuillez contacter les propriétaires du site pour les informer de ce problème.</li>
</ul>
">

<!ENTITY unsafeContentType.title "Type de fichier non sûr">
<!ENTITY unsafeContentType.longDesc "
<ul>
  <li>Veuillez contacter les propriétaires du site web pour les informer de ce problème.</li>
</ul>
">

<!ENTITY netReset.title "La connexion a été réinitialisée">
<!ENTITY netReset.longDesc "&sharedLongDesc;">

<!ENTITY netTimeout.title "Le délai d'attente est dépassé">
<!ENTITY netTimeout.longDesc "&sharedLongDesc;">

<!ENTITY protocolNotFound.title "L'adresse n'a pas été reconnue">
<!ENTITY protocolNotFound.longDesc "
<ul>
  <li>Il est peut-être nécessaire d'installer une autre application pour ouvrir ce type d'adresse.</li>
</ul>
">

<!ENTITY proxyConnectFailure.title "La connexion a été refusée par le serveur proxy">
<!ENTITY proxyConnectFailure.longDesc "
<ul>
  <li>Vérifiez que les paramètres du proxy sont corrects&#x00A0;;</li>
  <li>Contactez votre administrateur réseau pour vous assurer que le serveur proxy
    fonctionne.</li>
</ul>
">

<!ENTITY proxyResolveFailure.title "Le serveur proxy est introuvable">
<!ENTITY proxyResolveFailure.longDesc "
<ul>
  <li>Vérifiez que les paramètres du proxy sont corrects&#x00A0;;</li>
  <li>Vérifiez que la connexion réseau de votre ordinateur fonctionne&#x00A0;;</li>
  <li>Si votre ordinateur ou votre réseau est protégé par un pare-feu ou un proxy,
    assurez-vous que &brandShortName; a l'autorisation d'accéder au Web.</li>
</ul>
">

<!ENTITY redirectLoop.title "La page n'est pas redirigée correctement">
<!ENTITY redirectLoop.longDesc "
<ul>
  <li>La cause de ce problème peut être la désactivation ou le refus
    des cookies.</li>
</ul>
">

<!ENTITY unknownSocketType.title "Réponse inattendue du serveur">
<!ENTITY unknownSocketType.longDesc "
<ul>
  <li>Vérifiez que le gestionnaire de sécurité personnelle (PSM) est installé sur
    votre système.</li>
  <li>Ceci peut être dû à une configuration inhabituelle du serveur.</li>
</ul>
">

<!ENTITY nssFailure2.title "Échec de la connexion sécurisée">
<!ENTITY nssFailure2.longDesc "
<ul>
  <li>La page que vous essayez de consulter ne peut pas être affichée car l'authenticité des données reçues ne peut être vérifiée.</li>
  <li>Veuillez contacter les propriétaires du site web pour les informer de ce problème.
Vous pouvez également utiliser la commande dans le menu d'aide pour signaler un site non fonctionnel.</li>
</ul>
">

<!ENTITY nssBadCert.title "Échec de la connexion sécurisée">
<!ENTITY nssBadCert.longDesc2 "
<ul>
  <li>Ceci peut-être dû à un problème de configuration du serveur ou à une personne essayant d'usurper l'identité du serveur.</li>
  <li>Si vous avez déjà pu vous connecter à ce serveur, l'erreur est peut-être temporaire et vous pouvez essayer à nouveau plus tard.</li>
</ul>">

<!ENTITY sharedLongDesc "
<ul>
  <li>Le site est peut-être temporairement indisponible ou surchargé. Réessayez plus
    tard ;</li>
  <li>Si vous n'arrivez à naviguer sur aucun site, vérifiez la connexion
    au réseau de votre ordinateur&#x00A0;;</li>
  <li>Si votre ordinateur ou votre réseau est protégé par un pare-feu ou un proxy,
    assurez-vous que &brandShortName; est autorisé à accéder au Web.</li>
</ul>
">

<!ENTITY malwareBlocked.title "Suspicion de site malveillant !">
<!ENTITY malwareBlocked.longDesc "
<p>Les sites malveillants tentent d'installer des programmes qui volent les informations personnelles, qui utilisent votre ordinateur pour en attaquer d'autres ou qui endommagent votre système.</p>
<p>Les propriétaires de sites web qui pensent que leur site a été rapporté à tort comme malveillant peuvent <a href='http://www.stopbadware.org/home/reviewinfo'>demander une révision</a>.</p>">

<!ENTITY phishingBlocked.title "Suspicion de site contrefait !">
<!ENTITY phishingBlocked.longDesc "
<p>Saisir des informations personnelles sur cette page peut aboutir à un vol d'identité ou à une autre fraude.</p>
<p>Ces types de contrefaçon de sites sont utilisés dans des courriels frauduleux conçus pour des attaques par hameçonnage (ou phishing), dans lesquelles les pages web et les courriels frauduleux sont utilisés pour imiter des sources en lesquelles vous avez confiance.</p>">

<!ENTITY cspFrameAncestorBlocked.title "Bloqué par une stratégie de sécurité de contenu">
<!ENTITY cspFrameAncestorBlocked.longDesc "<p>&brandShortName; a empêché le chargement de cette page de cette manière car sa stratégie de sécurité de contenu ne le permet pas.</p>">

<!ENTITY securityOverride.linkText "Ou vous pouvez ajouter une exception…">
<!ENTITY securityOverride.getMeOutOfHereButton "Quitter cette page">
<!ENTITY securityOverride.exceptionButtonLabel "Ajouter une exception…">

<!-- LOCALIZATION NOTE (securityOverride.warningContent) - Do not translate the
contents of the <button> tags. It uses strings already defined above. The
button is included here (instead of netError.xhtml) because it exposes
functionality specific to firefox. -->

<!ENTITY securityOverride.warningContent "
<p>Vous ne devez pas ajouter d'exception si vous utilisez une connexion à Internet en laquelle vous n'avez pas totalement confiance ou si vous n'avez pas l'habitude de recevoir un avertissement pour ce serveur.</p>

<button id='getMeOutOfHereButton'>&securityOverride.getMeOutOfHereButton;</button>
<button id='exceptionDialogButton'>&securityOverride.exceptionButtonLabel;</button>
">

<!ENTITY corruptedContentError.title "Erreur due à un contenu corrompu">
<!ENTITY corruptedContentError.longDesc "<p>La page que vous essayez de voir ne peut pas être affichée car une erreur dans la transmission de données a été détectée.</p><ul><li>Veuillez contacter les propriétaires du site web pour les informer de ce problème.</li></ul>">

<!ENTITY remoteXUL.title "XUL distant">
<!ENTITY remoteXUL.longDesc "<p><ul><li>Veuillez contacter les propriétaires du site web pour les informer de ce problème.</li></ul></p>">

  <!ENTITY % globalDTD
    SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
]>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>Erreur de chargement de la page</title>
    <link rel="stylesheet" href="ping_data/netError.css" type="text/css" media="all" />
    <!-- If the location of the favicon is changed here, the FAVICON_ERRORPAGE_URL symbol in
         toolkit/components/places/src/nsFaviconService.h should be updated. -->
    <link rel="icon" type="image/png" id="favicon" href="chrome://global/skin/icons/warning-16.png" />

    <script type="application/javascript"><![CDATA[
      // Error url MUST be formatted like this:
      //   moz-neterror:page?e=error&u=url&d=desc
      //
      // or optionally, to specify an alternate CSS class to allow for
      // custom styling and favicon:
      //
      //   moz-neterror:page?e=error&u=url&s=classname&d=desc

      // Note that this file uses document.documentURI to get
      // the URL (with the format from above). This is because
      // document.location.href gets the current URI off the docshell,
      // which is the URL displayed in the location bar, i.e.
      // the URI that the user attempted to load.

      function getErrorCode()
      {
        var url = document.documentURI;
        var error = url.search(/e\=/);
        var duffUrl = url.search(/\&u\=/);
        return decodeURIComponent(url.slice(error + 2, duffUrl));
      }

      function getCSSClass()
      {
        var url = document.documentURI;
        var matches = url.match(/s\=([^&]+)\&/);
        // s is optional, if no match just return nothing
        if (!matches || matches.length < 2)
          return "";

        // parenthetical match is the second entry
        return decodeURIComponent(matches[1]);
      }

      function getDescription()
      {
        var url = document.documentURI;
        var desc = url.search(/d\=/);

        // desc == -1 if not found; if so, return an empty string
        // instead of what would turn out to be portions of the URI
        if (desc == -1)
          return "";

        return decodeURIComponent(url.slice(desc + 2));
      }

      function retryThis(buttonEl)
      {
        // Note: The application may wish to handle switching off "offline mode"
        // before this event handler runs, but using a capturing event handler.

        // Session history has the URL of the page that failed
        // to load, not the one of the error page. So, just call
        // reload(), which will also repost POST data correctly.
        try {
          location.reload();
        } catch (e) {
          // We probably tried to reload a URI that caused an exception to
          // occur;  e.g. a nonexistent file.
        }

        buttonEl.disabled = true;
      }

      function initPage()
      {
        var err = getErrorCode();
        
        // if it's an unknown error or there's no title or description
        // defined, get the generic message
        var errTitle = document.getElementById("et_" + err);
        var errDesc  = document.getElementById("ed_" + err);
        if (!errTitle || !errDesc)
        {
          errTitle = document.getElementById("et_generic");
          errDesc  = document.getElementById("ed_generic");
        }

        var title = document.getElementById("errorTitleText");
        if (title)
        {
          title.parentNode.replaceChild(errTitle, title);
          // change id to the replaced child's id so styling works
          errTitle.id = "errorTitleText";
        }

        var sd = document.getElementById("errorShortDescText");
        if (sd)
          sd.textContent = getDescription();

        var ld = document.getElementById("errorLongDesc");
        if (ld)
        {
          ld.parentNode.replaceChild(errDesc, ld);
          // change id to the replaced child's id so styling works
          errDesc.id = "errorLongDesc";
        }

        // remove undisplayed errors to avoid bug 39098
        var errContainer = document.getElementById("errorContainer");
        errContainer.parentNode.removeChild(errContainer);

        var className = getCSSClass();
        if (className && className != "expertBadCert") {
          // Associate a CSS class with the root of the page, if one was passed in,
          // to allow custom styling.
          // Not "expertBadCert" though, don't want to deal with the favicon
          document.documentElement.className = className;

          // Also, if they specified a CSS class, they must supply their own
          // favicon.  In order to trigger the browser to repaint though, we
          // need to remove/add the link element. 
          var favicon = document.getElementById("favicon");
          var faviconParent = favicon.parentNode;
          faviconParent.removeChild(favicon);
          favicon.setAttribute("href", "chrome://global/skin/icons/" + className + "_favicon.png");
          faviconParent.appendChild(favicon);
        }
        if (className == "expertBadCert") {
          showSecuritySection();
        }

        if (err == "remoteXUL") {
          // Remove the "Try again" button for remote XUL errors given that
          // it is useless.
          document.getElementById("errorTryAgain").style.display = "none";
        }

        if (err == "cspFrameAncestorBlocked") {
          // Remove the "Try again" button for CSP frame ancestors violation, since it's
          // almost certainly useless. (Bug 553180)
          document.getElementById("errorTryAgain").style.display = "none";
        }

        if (err == "nssBadCert") {
          // Remove the "Try again" button for security exceptions, since it's
          // almost certainly useless.
          document.getElementById("errorTryAgain").style.display = "none";
          document.getElementById("errorPageContainer").setAttribute("class", "certerror");
          addDomainErrorLink();
        }
        else {
          // Remove the override block for non-certificate errors.  CSS-hiding
          // isn't good enough here, because of bug 39098
          var secOverride = document.getElementById("securityOverrideDiv");
          secOverride.parentNode.removeChild(secOverride);
        }
      }
      
      function showSecuritySection() {
        // Swap link out, content in
        document.getElementById('securityOverrideContent').style.display = '';
        document.getElementById('securityOverrideLink').style.display = 'none';
      }
      
      /* In the case of SSL error pages about domain mismatch, see if
         we can hyperlink the user to the correct site.  We don't want
         to do this generically since it allows MitM attacks to redirect
         users to a site under attacker control, but in certain cases
         it is safe (and helpful!) to do so.  Bug 402210
      */
      function addDomainErrorLink() {
        // Rather than textContent, we need to treat description as HTML
        var sd = document.getElementById("errorShortDescText");
        if (sd) {
          var desc = getDescription();
          
          // sanitize description text - see bug 441169
          
          // First, find the index of the <a> tag we care about, being careful not to
          // use an over-greedy regex
          var re = /<a id="cert_domain_link" title="([^"]+)">/;
          var result = re.exec(desc);
          if(!result)
            return;
          
          // Remove sd's existing children
          sd.textContent = "";

          // Everything up to the link should be text content
          sd.appendChild(document.createTextNode(desc.slice(0, result.index)));
          
          // Now create the link itself
          var anchorEl = document.createElement("a");
          anchorEl.setAttribute("id", "cert_domain_link");
          anchorEl.setAttribute("title", result[1]);
          anchorEl.appendChild(document.createTextNode(result[1]));
          sd.appendChild(anchorEl);
          
          // Finally, append text for anything after the closing </a>
          sd.appendChild(document.createTextNode(desc.slice(desc.indexOf("</a>") + "</a>".length)));
        }

        var link = document.getElementById('cert_domain_link');
        if (!link)
          return;
        
        var okHost = link.getAttribute("title");
        var thisHost = document.location.hostname;
        var proto = document.location.protocol;

        // If okHost is a wildcard domain ("*.example.com") let's
        // use "www" instead.  "*.example.com" isn't going to
        // get anyone anywhere useful. bug 432491
        okHost = okHost.replace(/^\*\./, "www.");

        /* case #1: 
         * example.com uses an invalid security certificate.
         *
         * The certificate is only valid for www.example.com
         *
         * Make sure to include the "." ahead of thisHost so that
         * a MitM attack on paypal.com doesn't hyperlink to "notpaypal.com"
         *
         * We'd normally just use a RegExp here except that we lack a
         * library function to escape them properly (bug 248062), and
         * domain names are famous for having '.' characters in them,
         * which would allow spurious and possibly hostile matches.
         */
        if (endsWith(okHost, "." + thisHost))
          link.href = proto + okHost;

        /* case #2:
         * browser.garage.maemo.org uses an invalid security certificate.
         *
         * The certificate is only valid for garage.maemo.org
         */
        if (endsWith(thisHost, "." + okHost))
          link.href = proto + okHost;
      }
      
      function endsWith(haystack, needle) {
        return haystack.slice(-needle.length) == needle;
      }

    ]]></script>
  </head>

  <body dir="ltr">

    <!-- ERROR ITEM CONTAINER (removed during loading to avoid bug 39098) -->
    

    <!-- PAGE CONTAINER (for styling purposes only) -->
    <div id="errorPageContainer">
    
      <!-- Error Title -->
      <div id="errorTitle">
        <h1 id="errorTitleText">Le délai d'attente est dépassé</h1>
      </div>
      
      <!-- LONG CONTENT (the section most likely to require scrolling) -->
      <div id="errorLongContent">
      
        <!-- Short Description -->
        <div id="errorShortDesc">
          <p id="errorShortDescText">Le serveur à l'adresse www.facebook.com met trop de temps à répondre.</p>
        </div>

        <!-- Long Description (Note: See netError.dtd for used XHTML tags) -->
        <div id="errorLongDesc">
<ul>
  <li>Le site est peut-être temporairement indisponible ou surchargé. Réessayez plus
    tard ;</li>
  <li>Si vous n'arrivez à naviguer sur aucun site, vérifiez la connexion
    au réseau de votre ordinateur ;</li>
  <li>Si votre ordinateur ou votre réseau est protégé par un pare-feu ou un proxy,
    assurez-vous que Firefox est autorisé à accéder au Web.</li>
</ul>
</div>

        <!-- Override section - For ssl errors only.  Removed on init for other
             error types.  -->
        
      </div>

      <!-- Retry Button -->
      <button id="errorTryAgain" autocomplete="off" onclick="retryThis(this);">Réessayer</button>
      <script>
        // Only do autofocus if we're the toplevel frame; otherwise we
        // don't want to call attention to ourselves!  The key part is
        // that autofocus happens on insertion into the tree, so we
        // can remove the button, add @autofocus, and reinsert the
        // button.
        if (window.top == window) {
            var button = document.getElementById("errorTryAgain");
            var nextSibling = button.nextSibling;
            var parent = button.parentNode;
            parent.removeChild(button);
            button.setAttribute("autofocus", "true");
            parent.insertBefore(button, nextSibling);
        }
      </script>

    </div>

    <!--
    - Note: It is important to run the script this way, instead of using
    - an onload handler. This is because error pages are loaded as
    - LOAD_BACKGROUND, which means that onload handlers will not be executed.
    -->
    <script type="application/javascript">initPage();</script>

  </body>
</html>